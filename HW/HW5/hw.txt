1.a

50
    20
        10
	    15
	40
	    30
		23
		35
    60
	70
	    62
	    80
		75

1.b

In-order:
10 - 15 - 20 - 23 - 30 - 35 - 40 - 50 - 60 - 62 - 70 - 75 - 80

Pre-order:
50 - 20 - 10 - 15 - 40 - 30 - 23 - 35 - 60 - 70 - 62 - 80 - 75

Post-order:
15 - 10 - 23 - 35 - 30 - 40 - 20 - 62 - 75 - 80 - 70 - 60 - 50


1.c

After delete 30:

50
    20
        10
	    15
	40
	    35
		23
    60
	70
	    62
	    80
		75

Then after delete 20:

50
    15
        10
	40
	    35
		23
    60
	70
	    62
	    80
		75


2.a

Struct node
{
    node(int value, node* parent)
    {
	nodeValue = value;
	parentPtr = parent;
	leftChildPtr = nullptr;
	rightChildPtr = nullptr;
    }
    int nodeValue;
    node* parentPtr;
    node* leftChildPtr;
    node* rightChildPtr;
};


2.b

void insert(const int insertValue)
{
    if m_root is nullptr:
	create a new node with value = insertValue and parent = nullptr
	return

    declare node* cur = m_root;

    repeatedly:
	if insertValue == cur->nodeValue:
	    return
	if insertValue < cur->nodeValue:
	    if cur->left != nullptr:
		cur = cur->left
	    else:
		cur->left = new node(insertValue, cur)
		return
	else if insertValue > cur->nodeValue:
	    if cur->right != nullptr:
		cur = cur->right
	    else:
		cur->right = new node(insertValue, cur)
		return
}


3.a

7
    5
	4
	0
    6
	3


3.b

7,5,6,4,0,3


3.c

6,5,3,4,0


4.

a. O(C + S)
b. O(log(C) + S)
c. O(log(C) + log(S))
d. O(log(S))
e. O(1)
f. O(log(C) + S)
g. O(S*log(S))
h. O(C*log(S))